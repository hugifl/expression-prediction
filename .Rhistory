print(volume)
}
return(volume)
}
dist = c(0, pi/2,pi, 3*pi/2 ,2*pi)
a = rep(1,1,1,1,1)
retina_volume_calculator(thickness = a, dist, 1)
retina_volume_calculator(c(1,1,1), dist, 1)
dist = c(0, pi/2,pi, 3*pi/2 ,2*pi)
a = c(1,1,1,1,1)
retina_volume_calculator(thickness, dist, 1)
retina_volume_calculator <- function(thickness, dist, rvit) {
volume <- 0
#angles <- seq(0, phi_max, length.out = n_steps + 1)
angles <- foveal_distance_to_angle(r = rvit, dist = dist)
print(angles)
for(i in 1:(length(angles)-1)) {
print(i)
f = function(x, y) (x^2)*(-cos(angles[i+1])+cos(angles[i]))
volume <- volume + integral2(f, xmin = rvit, xmax = rvit + thickness[i], ymin = 0, ymax = 2*pi)$Q
print(volume)
}
return(volume)
}
dist = c(0, pi/2,pi, 3*pi/2 ,2*pi)
a = c(1,1,1,1,1)
retina_volume_calculator(thickness, dist, 1)
retina_volume_calculator(thickness, dist, 0)
retina_volume_calculator <- function(thickness, dist, rvit) {
volume <- 0
print(thickness)
#angles <- seq(0, phi_max, length.out = n_steps + 1)
angles <- foveal_distance_to_angle(r = rvit, dist = dist)
print(angles)
for(i in 1:(length(angles)-1)) {
print(thickness[i])
f = function(x, y) (x^2)*(-cos(angles[i+1])+cos(angles[i]))
volume <- volume + integral2(f, xmin = rvit, xmax = rvit + thickness[i], ymin = 0, ymax = 2*pi)$Q
print(volume)
}
return(volume)
}
dist = c(0, pi/2,pi, 3*pi/2 ,2*pi)
a = c(1,1,1,1,1)
retina_volume_calculator(thickness, dist, 1)
retina_volume_calculator <- function(thickness, dist, rvit) {
volume <- 0
print(thickness)
#angles <- seq(0, phi_max, length.out = n_steps + 1)
angles <- foveal_distance_to_angle(r = rvit, dist = dist)
print(angles)
for(i in 1:(length(angles)-1)) {
print(thickness[i])
f = function(x, y) (x^2)*(-cos(angles[i+1])+cos(angles[i]))
volume <- volume + integral2(f, xmin = rvit, xmax = rvit + thickness[i], ymin = 0, ymax = 2*pi)$Q
print(volume)
}
return(volume)
}
dist = c(0, pi/2,pi, 3*pi/2 ,2*pi)
a = c(1,1,1,1,1)
retina_volume_calculator(thickness = a, dist, 1)
retina_volume_calculator(thickness = a, dist, 0)
retina_volume_calculator(thickness = a, dist, 1)
dist = c(0, 2*pi)
a = c(1,1)
retina_volume_calculator(thickness = a, dist, 1)
retina_volume_calculator <- function(thickness, dist, rvit) {
volume <- 0
#angles <- seq(0, phi_max, length.out = n_steps + 1)
angles <- foveal_distance_to_angle(r = rvit, dist = dist)
print(angles)
for(i in 1:(length(angles)-1)) {
print(i)
print(thickness[i])
f = function(x, y) (x^2)*(-cos(angles[i+1])+cos(angles[i]))
volume <- volume + integral2(f, xmin = rvit, xmax = rvit + thickness[i], ymin = 0, ymax = 2*pi)$Q
print(volume)
}
return(volume)
}
dist = c(0, 2*pi)
a = c(1,1)
retina_volume_calculator(thickness = a, dist, 1)
f = function(x, y) (x^2)*(-cos(2*pi)+cos(0))
volume <- volume + integral2(f, xmin = 0, xmax = 1, ymin = 0, ymax = 2*pi)$Q
f = function(x, y) (x^2)*(-cos(2*pi)+cos(0))
integral2(f, xmin = 0, xmax = 1, ymin = 0, ymax = 2*pi)$Q
f = function(x, y) (x^2)*(-cos(pi)+cos(0))
integral2(f, xmin = 0, xmax = 1, ymin = 0, ymax = 2*pi)$Q
dist = c(0, pi)
a = c(1,1)
retina_volume_calculator(thickness = a, dist, 1)
dist = c(0, pi/2,pi)
a = c(1,1,1)
retina_volume_calculator(thickness = a, dist, 1)
dist = c(0, pi/3,pi/2,2*pi/3,pi)
a = c(1,1,1,1,1)
retina_volume_calculator(thickness = a, dist, 1)
retina_volume_calculator <- function(thickness, dist, rvit) {
volume <- 0
#angles <- seq(0, phi_max, length.out = n_steps + 1)
angles <- foveal_distance_to_angle(r = rvit, dist = dist)
for(i in 1:(length(angles)-1)) {
f = function(x, y) (x^2)*(-cos(angles[i+1])+cos(angles[i]))
volume <- volume + integral2(f, xmin = rvit, xmax = rvit + thickness[i], ymin = 0, ymax = 2*pi)$Q
}
return(volume)
}
dist = c(0, pi/3,pi/2,2*pi/3,pi)
a = c(1,1,1,1,1)
retina_volume_calculator(thickness = a, dist, 1)
dist = c(0, pi/3,pi/2,2*pi/3)
a = c(0.02,0.02,0.02,0.02)
retina_volume_calculator(thickness = a, dist, 1)
dist = c(0, pi/3,pi/2,2*pi/3)
a = c(0.02,0.02,0.02,0.02)
retina_volume_calculator(thickness = a, dist, 1.0608)
library(ranger)
installed.packages()["ranger", "LibPath"]
1+1
1+1
library(ranger)
library(tidyverse)
library(Hmisc)
library(latticeExtra)
library(latticeExtra)
library(latticeExtra)
load("C:/Users/flori/OneDrive/Desktop/expression_prediction/train_features_loaded.RData")
View(X.train)
View(train.features)
y_train <- X.train$gex
train.features.flattened <- flatten.bins(train.features, markers = markers, 7)
View(train.features.flattened)
X_train <- train.features.flattened[,ncol(train.features):]
X_train <- train.features.flattened[,ncol(train.features):ncol(train.features.flattened)]
View(X_train)
X_train <- train.features.flattened[,(ncol(train.features) + 1):ncol(train.features.flattened)]
View(X.val)
val.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.val, n.bins = 7, window.size = 10000)
epigenetic.marker.feature.extraction <- function(markers.path, markers, data.frame, n.bins, window.size){
feature.df <- data.frame(data.frame$gene_name, data.frame$dataset, data.frame$chr, data.frame$strand)
feature.df[markers] <- 0
for (marker in markers){
print(marker)
for (i in c(1:nrow(data.frame))){
if (i%%1000 == 0){
print(i)
}
feature.df[[marker]][i] <- I(list(rep(0, n.bins)))
path <- paste0(markers.path, marker, "-bigwig/", as.character(data.frame$dataset[i]),".bigwig")
if (!file.exists(path)) {
path <- paste0(markers.path, marker, "-bigwig/", as.character(data.frame$dataset[i]),".bw")
}
TSS <- (data.frame$TSS_start[i] + data.frame$TSS_end[i])/2
start.bins <- TSS - window.size/2
end.bins <- TSS + window.size/2
bin.borders <- round(seq(from = start.bins, to = end.bins, length.out = (n.bins + 1)), digits = 0)
bin.df <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("chr", "start", "end"))
for (j in c(1:(length(bin.borders) - 1))){
bin.df <- rbind(bin.df, data.frame(chr = data.frame$chr[i], start = bin.borders[j], end = bin.borders[j + 1]))
}
tryCatch({
features <- PopSV::bin.bw(bw.file = path, bin.df = bin.df, outfile.prefix = NULL, appendIndex.outfile = FALSE,
chunk.size = n.bins, check.chr.name = TRUE, no.checks = FALSE,
read.length = 100, fromSummaries = TRUE)
feature.df[[marker]][i] <- I(list(features$bc$bc))
print("yeh buddy")
if (feature.df$data.frame.strand[i] == "-"){
feature.df[[marker]][[i]] <- rev(feature.df[[marker]][[i]])
}
}, error = function(e) {
print(paste0("no reads found in: ", as.character(data.frame$gene_name[i])," and marker:", marker))
#feature.df[[marker]][i] <- I(list(features$bc$bc)) #I(list(rep(0, n.bins)))
})
}
}
return(feature.df)
}
val.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.val, n.bins = 7, window.size = 10000)
train.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.train, n.bins = 7, window.size = 10000)
View(train.features)
file.path <- "./CAGE-train/"
data.sets <- c('X1', 'X2', 'X3')
dfs <- gene.loader(path = file.path, data.set.names = data.sets)
rm(list = ls())
library(tidyverse)
library(tidyverse)
library(stringr)
library(PopSV)
library(ranger)
library(Hmisc)
library(latticeExtra)
gene.loader <- function(path, data.set.names){
train.info.df <- data.frame()
train.y.df <- data.frame()
val.info.df <- data.frame()
val.y.df <- data.frame()
test.info.df <- data.frame()
for (data.set.name in data.set.names){
file_list <- list.files(path = path, pattern = paste0("^",data.set.name))
for (file in file_list){
my_parts <- str_split(file, pattern = "_")
role <- my_parts[[1]][2]
information <- my_parts[[1]][3]
if (role == "train"){
if (information == "y.tsv"){
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
train.y.df <- rbind(train.y.df, df)
} else if (information == "info.tsv"){
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
train.info.df <- rbind(train.info.df, df)
}
} else if (role == "val"){
if (information == "y.tsv"){
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
val.y.df <- rbind(val.y.df, df)
} else if (information == "info.tsv") {
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
val.info.df <- rbind(val.info.df, df)
}
} else if (role == "test"){
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
test.info.df <- rbind(test.info.df, df)
}
}
}
train.df <- merge(x=train.info.df,y=train.y.df, by=c("gene_name","dataset"))
val.df <- merge(x=val.info.df,y=val.y.df, by=c("gene_name","dataset"))
test.df <- test.info.df
return(list(train.df, val.df, test.df))
}
epigenetic.marker.feature.extraction <- function(markers.path, markers, data.frame, n.bins, window.size){
feature.df <- data.frame(data.frame$gene_name, data.frame$dataset, data.frame$chr, data.frame$strand)
feature.df[markers] <- 0
for (marker in markers){
print(marker)
for (i in c(1:nrow(data.frame))){
if (i%%1000 == 0){
print(i)
}
feature.df[[marker]][i] <- I(list(rep(0, n.bins)))
path <- paste0(markers.path, marker, "-bigwig/", as.character(data.frame$dataset[i]),".bigwig")
if (!file.exists(path)) {
path <- paste0(markers.path, marker, "-bigwig/", as.character(data.frame$dataset[i]),".bw")
}
TSS <- (data.frame$TSS_start[i] + data.frame$TSS_end[i])/2
start.bins <- TSS - window.size/2
end.bins <- TSS + window.size/2
bin.borders <- round(seq(from = start.bins, to = end.bins, length.out = (n.bins + 1)), digits = 0)
bin.df <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("chr", "start", "end"))
for (j in c(1:(length(bin.borders) - 1))){
bin.df <- rbind(bin.df, data.frame(chr = data.frame$chr[i], start = bin.borders[j], end = bin.borders[j + 1]))
}
tryCatch({
features <- PopSV::bin.bw(bw.file = path, bin.df = bin.df, outfile.prefix = NULL, appendIndex.outfile = FALSE,
chunk.size = n.bins, check.chr.name = TRUE, no.checks = FALSE,
read.length = 100, fromSummaries = TRUE)
feature.df[[marker]][i] <- I(list(features$bc$bc))
print("yeh buddy")
if (feature.df$data.frame.strand[i] == "-"){
feature.df[[marker]][[i]] <- rev(feature.df[[marker]][[i]])
}
}, error = function(e) {
print(paste0("no reads found in: ", as.character(data.frame$gene_name[i])," and marker:", marker))
#feature.df[[marker]][i] <- I(list(features$bc$bc)) #I(list(rep(0, n.bins)))
})
}
}
return(feature.df)
}
flatten.bins <- function(bin.df, markers, n.bins){
for (marker in markers){
print(marker)
for (i in c(1:n.bins)){
new.col <- paste0(marker,"_bin_",i)
bin.df[[new.col]] <- lapply(bin.df[[marker]], `[[`, i)
}
}
return(bin.df)
}
min.max.normalize.features <- function(df){
df.norm <- df
maximums <- vector("numeric")
for (i in 1:ncol(df)) {
if (colnames(df[i]) %in% markers){
column_max <- max(unlist(lapply(df[[i]], max)))
maximums <- c(maximums, column_max)
for(j in 1:nrow(df)){
df.norm[j,i][[1]] <- lapply(df[j,i],function(x) x/column_max)
}
}
}
return(df.norm)
}
log.normalize.features <- function(df){
df.norm <- df
for (i in 1:ncol(df)) {
if (colnames(df[i]) %in% markers){
for(j in 1:nrow(df)){
df.norm[j,i][[1]] <- lapply(df[j,i],function(x) log(x + 1e-5))
}
}
}
return(df.norm)
}
log.normalize.gex <- function(df){
df.norm <- df
df.norm$gex <- log(df.norm$gex + 1e-5)
return(df.norm)
}
file.path <- "./CAGE-train/"
data.sets <- c('X1', 'X2', 'X3')
dfs <- gene.loader(path = file.path, data.set.names = data.sets)
setwd("C:/Users/flori/OneDrive/Desktop/expression_prediction")
dfs <- gene.loader(path = file.path, data.set.names = data.sets)
rm(list = ls())
library(tidyverse)
library(stringr)
library(PopSV)
library(ranger)
library(Hmisc)
library(latticeExtra)
gene.loader <- function(path, data.set.names){
train.info.df <- data.frame()
train.y.df <- data.frame()
val.info.df <- data.frame()
val.y.df <- data.frame()
test.info.df <- data.frame()
for (data.set.name in data.set.names){
file_list <- list.files(path = path, pattern = paste0("^",data.set.name))
for (file in file_list){
my_parts <- str_split(file, pattern = "_")
role <- my_parts[[1]][2]
information <- my_parts[[1]][3]
if (role == "train"){
if (information == "y.tsv"){
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
train.y.df <- rbind(train.y.df, df)
} else if (information == "info.tsv"){
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
train.info.df <- rbind(train.info.df, df)
}
} else if (role == "val"){
if (information == "y.tsv"){
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
val.y.df <- rbind(val.y.df, df)
} else if (information == "info.tsv") {
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
val.info.df <- rbind(val.info.df, df)
}
} else if (role == "test"){
df <- read_tsv(paste0(path,file))
df$dataset <- data.set.name
test.info.df <- rbind(test.info.df, df)
}
}
}
train.df <- merge(x=train.info.df,y=train.y.df, by=c("gene_name","dataset"))
val.df <- merge(x=val.info.df,y=val.y.df, by=c("gene_name","dataset"))
test.df <- test.info.df
return(list(train.df, val.df, test.df))
}
epigenetic.marker.feature.extraction <- function(markers.path, markers, data.frame, n.bins, window.size){
feature.df <- data.frame(data.frame$gene_name, data.frame$dataset, data.frame$chr, data.frame$strand)
feature.df[markers] <- 0
for (marker in markers){
print(marker)
for (i in c(1:nrow(data.frame))){
if (i%%1000 == 0){
print(i)
}
feature.df[[marker]][i] <- I(list(rep(0, n.bins)))
path <- paste0(markers.path, marker, "-bigwig/", as.character(data.frame$dataset[i]),".bigwig")
if (!file.exists(path)) {
path <- paste0(markers.path, marker, "-bigwig/", as.character(data.frame$dataset[i]),".bw")
}
TSS <- (data.frame$TSS_start[i] + data.frame$TSS_end[i])/2
start.bins <- TSS - window.size/2
end.bins <- TSS + window.size/2
bin.borders <- round(seq(from = start.bins, to = end.bins, length.out = (n.bins + 1)), digits = 0)
bin.df <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("chr", "start", "end"))
for (j in c(1:(length(bin.borders) - 1))){
bin.df <- rbind(bin.df, data.frame(chr = data.frame$chr[i], start = bin.borders[j], end = bin.borders[j + 1]))
}
tryCatch({
features <- PopSV::bin.bw(bw.file = path, bin.df = bin.df, outfile.prefix = NULL, appendIndex.outfile = FALSE,
chunk.size = n.bins, check.chr.name = TRUE, no.checks = FALSE,
read.length = 100, fromSummaries = TRUE)
feature.df[[marker]][i] <- I(list(features$bc$bc))
print("yeh buddy")
if (feature.df$data.frame.strand[i] == "-"){
feature.df[[marker]][[i]] <- rev(feature.df[[marker]][[i]])
}
}, error = function(e) {
print(paste0("no reads found in: ", as.character(data.frame$gene_name[i])," and marker:", marker))
#feature.df[[marker]][i] <- I(list(features$bc$bc)) #I(list(rep(0, n.bins)))
})
}
}
return(feature.df)
}
flatten.bins <- function(bin.df, markers, n.bins){
for (marker in markers){
print(marker)
for (i in c(1:n.bins)){
new.col <- paste0(marker,"_bin_",i)
bin.df[[new.col]] <- lapply(bin.df[[marker]], `[[`, i)
}
}
return(bin.df)
}
min.max.normalize.features <- function(df){
df.norm <- df
maximums <- vector("numeric")
for (i in 1:ncol(df)) {
if (colnames(df[i]) %in% markers){
column_max <- max(unlist(lapply(df[[i]], max)))
maximums <- c(maximums, column_max)
for(j in 1:nrow(df)){
df.norm[j,i][[1]] <- lapply(df[j,i],function(x) x/column_max)
}
}
}
return(df.norm)
}
log.normalize.features <- function(df){
df.norm <- df
for (i in 1:ncol(df)) {
if (colnames(df[i]) %in% markers){
for(j in 1:nrow(df)){
df.norm[j,i][[1]] <- lapply(df[j,i],function(x) log(x + 1e-5))
}
}
}
return(df.norm)
}
log.normalize.gex <- function(df){
df.norm <- df
df.norm$gex <- log(df.norm$gex + 1e-5)
return(df.norm)
}
file.path <- "./CAGE-train/"
data.sets <- c('X1', 'X2', 'X3')
dfs <- gene.loader(path = file.path, data.set.names = data.sets)
X.train <- dfs[[1]]
X.val <- dfs[[2]]
X.test <- dfs[[3]]
markers <- c('H3K4me3',"H3K4me1",'H3K36me3','DNase','H3K27me3')
train.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.train, n.bins = 7, window.size = 10000)
val.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.val, n.bins = 7, window.size = 10000)
train.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.train, n.bins = 7, window.size = 10000)
epigenetic.marker.feature.extraction <- function(markers.path, markers, data.frame, n.bins, window.size){
feature.df <- data.frame(data.frame$gene_name, data.frame$dataset, data.frame$chr, data.frame$strand)
feature.df[markers] <- 0
for (marker in markers){
print(marker)
for (i in c(1:nrow(data.frame))){
if (i%%1000 == 0){
print(i)
}
feature.df[[marker]][i] <- I(list(rep(0, n.bins)))
path <- paste0(markers.path, marker, "-bigwig/", as.character(data.frame$dataset[i]),".bigwig")
if (!file.exists(path)) {
path <- paste0(markers.path, marker, "-bigwig/", as.character(data.frame$dataset[i]),".bw")
}
TSS <- (data.frame$TSS_start[i] + data.frame$TSS_end[i])/2
start.bins <- TSS - window.size/2
end.bins <- TSS + window.size/2
bin.borders <- round(seq(from = start.bins, to = end.bins, length.out = (n.bins + 1)), digits = 0)
bin.df <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("chr", "start", "end"))
for (j in c(1:(length(bin.borders) - 1))){
bin.df <- rbind(bin.df, data.frame(chr = data.frame$chr[i], start = bin.borders[j], end = bin.borders[j + 1]))
}
tryCatch({
features <- PopSV::bin.bw(bw.file = path, bin.df = bin.df, outfile.prefix = NULL, appendIndex.outfile = FALSE,
chunk.size = n.bins, check.chr.name = TRUE, no.checks = FALSE,
read.length = 100, fromSummaries = TRUE)
feature.df[[marker]][i] <- I(list(features$bc$bc))
if (feature.df$data.frame.strand[i] == "-"){
feature.df[[marker]][[i]] <- rev(feature.df[[marker]][[i]])
}
}, error = function(e) {
print(paste0("no reads found in: ", as.character(data.frame$gene_name[i])," and marker:", marker))
#feature.df[[marker]][i] <- I(list(features$bc$bc)) #I(list(rep(0, n.bins)))
})
}
}
return(feature.df)
}
train.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.train, n.bins = 7, window.size = 10000)
val.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.val, n.bins = 7, window.size = 10000)
test.features <- epigenetic.marker.feature.extraction(markers.path = "./", markers = markers,
data.frame = X.test, n.bins = 7, window.size = 10000)
save.image("C:/Users/flori/OneDrive/Desktop/expression_prediction/allfeaturesloaded.RData")
